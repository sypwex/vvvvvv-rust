/* automatically generated by rust-bindgen 0.58.1 */

pub const PHYSFS_VER_MAJOR: u32 = 3;
pub const PHYSFS_VER_MINOR: u32 = 0;
pub const PHYSFS_VER_PATCH: u32 = 2;
pub type PHYSFS_uint8 = ::std::os::raw::c_uchar;
pub type PHYSFS_sint8 = ::std::os::raw::c_schar;
pub type PHYSFS_uint16 = ::std::os::raw::c_ushort;
pub type PHYSFS_sint16 = ::std::os::raw::c_short;
pub type PHYSFS_uint32 = ::std::os::raw::c_uint;
pub type PHYSFS_sint32 = ::std::os::raw::c_int;
pub type PHYSFS_uint64 = ::std::os::raw::c_ulonglong;
pub type PHYSFS_sint64 = ::std::os::raw::c_longlong;
pub type PHYSFS_compile_time_assert_uint8IsOneByte = [::std::os::raw::c_int; 1usize];
pub type PHYSFS_compile_time_assert_sint8IsOneByte = [::std::os::raw::c_int; 1usize];
pub type PHYSFS_compile_time_assert_uint16IsTwoBytes = [::std::os::raw::c_int; 1usize];
pub type PHYSFS_compile_time_assert_sint16IsTwoBytes = [::std::os::raw::c_int; 1usize];
pub type PHYSFS_compile_time_assert_uint32IsFourBytes = [::std::os::raw::c_int; 1usize];
pub type PHYSFS_compile_time_assert_sint32IsFourBytes = [::std::os::raw::c_int; 1usize];
pub type PHYSFS_compile_time_assert_uint64IsEightBytes = [::std::os::raw::c_int; 1usize];
pub type PHYSFS_compile_time_assert_sint64IsEightBytes = [::std::os::raw::c_int; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PHYSFS_File {
    pub opaque: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_PHYSFS_File() {
    assert_eq!(
        ::std::mem::size_of::<PHYSFS_File>(),
        8usize,
        concat!("Size of: ", stringify!(PHYSFS_File))
    );
    assert_eq!(
        ::std::mem::align_of::<PHYSFS_File>(),
        8usize,
        concat!("Alignment of ", stringify!(PHYSFS_File))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_File>())).opaque as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_File),
            "::",
            stringify!(opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PHYSFS_ArchiveInfo {
    pub extension: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
    pub author: *const ::std::os::raw::c_char,
    pub url: *const ::std::os::raw::c_char,
    pub supportsSymlinks: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PHYSFS_ArchiveInfo() {
    assert_eq!(
        ::std::mem::size_of::<PHYSFS_ArchiveInfo>(),
        40usize,
        concat!("Size of: ", stringify!(PHYSFS_ArchiveInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<PHYSFS_ArchiveInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(PHYSFS_ArchiveInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_ArchiveInfo>())).extension as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_ArchiveInfo),
            "::",
            stringify!(extension)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_ArchiveInfo>())).description as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_ArchiveInfo),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_ArchiveInfo>())).author as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_ArchiveInfo),
            "::",
            stringify!(author)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_ArchiveInfo>())).url as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_ArchiveInfo),
            "::",
            stringify!(url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PHYSFS_ArchiveInfo>())).supportsSymlinks as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_ArchiveInfo),
            "::",
            stringify!(supportsSymlinks)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PHYSFS_Version {
    pub major: PHYSFS_uint8,
    pub minor: PHYSFS_uint8,
    pub patch: PHYSFS_uint8,
}
#[test]
fn bindgen_test_layout_PHYSFS_Version() {
    assert_eq!(
        ::std::mem::size_of::<PHYSFS_Version>(),
        3usize,
        concat!("Size of: ", stringify!(PHYSFS_Version))
    );
    assert_eq!(
        ::std::mem::align_of::<PHYSFS_Version>(),
        1usize,
        concat!("Alignment of ", stringify!(PHYSFS_Version))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Version>())).major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Version),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Version>())).minor as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Version),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Version>())).patch as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Version),
            "::",
            stringify!(patch)
        )
    );
}
extern "C" {
    pub fn PHYSFS_getLinkedVersion(ver: *mut PHYSFS_Version);
}
extern "C" {
    pub fn PHYSFS_init(argv0: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_deinit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_supportedArchiveTypes() -> *mut *const PHYSFS_ArchiveInfo;
}
extern "C" {
    pub fn PHYSFS_freeList(listVar: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn PHYSFS_getLastError() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn PHYSFS_getDirSeparator() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn PHYSFS_permitSymbolicLinks(allow: ::std::os::raw::c_int);
}
extern "C" {
    pub fn PHYSFS_getCdRomDirs() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn PHYSFS_getBaseDir() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn PHYSFS_getUserDir() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn PHYSFS_getWriteDir() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn PHYSFS_setWriteDir(newDir: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_addToSearchPath(
        newDir: *const ::std::os::raw::c_char,
        appendToPath: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_removeFromSearchPath(
        oldDir: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_getSearchPath() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn PHYSFS_setSaneConfig(
        organization: *const ::std::os::raw::c_char,
        appName: *const ::std::os::raw::c_char,
        archiveExt: *const ::std::os::raw::c_char,
        includeCdRoms: ::std::os::raw::c_int,
        archivesFirst: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_mkdir(dirName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_delete(filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_getRealDir(
        filename: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn PHYSFS_enumerateFiles(
        dir: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn PHYSFS_exists(fname: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_isDirectory(fname: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_isSymbolicLink(fname: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_getLastModTime(filename: *const ::std::os::raw::c_char) -> PHYSFS_sint64;
}
extern "C" {
    pub fn PHYSFS_openWrite(filename: *const ::std::os::raw::c_char) -> *mut PHYSFS_File;
}
extern "C" {
    pub fn PHYSFS_openAppend(filename: *const ::std::os::raw::c_char) -> *mut PHYSFS_File;
}
extern "C" {
    pub fn PHYSFS_openRead(filename: *const ::std::os::raw::c_char) -> *mut PHYSFS_File;
}
extern "C" {
    pub fn PHYSFS_close(handle: *mut PHYSFS_File) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_read(
        handle: *mut PHYSFS_File,
        buffer: *mut ::std::os::raw::c_void,
        objSize: PHYSFS_uint32,
        objCount: PHYSFS_uint32,
    ) -> PHYSFS_sint64;
}
extern "C" {
    pub fn PHYSFS_write(
        handle: *mut PHYSFS_File,
        buffer: *const ::std::os::raw::c_void,
        objSize: PHYSFS_uint32,
        objCount: PHYSFS_uint32,
    ) -> PHYSFS_sint64;
}
extern "C" {
    pub fn PHYSFS_eof(handle: *mut PHYSFS_File) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_tell(handle: *mut PHYSFS_File) -> PHYSFS_sint64;
}
extern "C" {
    pub fn PHYSFS_seek(handle: *mut PHYSFS_File, pos: PHYSFS_uint64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_fileLength(handle: *mut PHYSFS_File) -> PHYSFS_sint64;
}
extern "C" {
    pub fn PHYSFS_setBuffer(
        handle: *mut PHYSFS_File,
        bufsize: PHYSFS_uint64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_flush(handle: *mut PHYSFS_File) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_swapSLE16(val: PHYSFS_sint16) -> PHYSFS_sint16;
}
extern "C" {
    pub fn PHYSFS_swapULE16(val: PHYSFS_uint16) -> PHYSFS_uint16;
}
extern "C" {
    pub fn PHYSFS_swapSLE32(val: PHYSFS_sint32) -> PHYSFS_sint32;
}
extern "C" {
    pub fn PHYSFS_swapULE32(val: PHYSFS_uint32) -> PHYSFS_uint32;
}
extern "C" {
    pub fn PHYSFS_swapSLE64(val: PHYSFS_sint64) -> PHYSFS_sint64;
}
extern "C" {
    pub fn PHYSFS_swapULE64(val: PHYSFS_uint64) -> PHYSFS_uint64;
}
extern "C" {
    pub fn PHYSFS_swapSBE16(val: PHYSFS_sint16) -> PHYSFS_sint16;
}
extern "C" {
    pub fn PHYSFS_swapUBE16(val: PHYSFS_uint16) -> PHYSFS_uint16;
}
extern "C" {
    pub fn PHYSFS_swapSBE32(val: PHYSFS_sint32) -> PHYSFS_sint32;
}
extern "C" {
    pub fn PHYSFS_swapUBE32(val: PHYSFS_uint32) -> PHYSFS_uint32;
}
extern "C" {
    pub fn PHYSFS_swapSBE64(val: PHYSFS_sint64) -> PHYSFS_sint64;
}
extern "C" {
    pub fn PHYSFS_swapUBE64(val: PHYSFS_uint64) -> PHYSFS_uint64;
}
extern "C" {
    pub fn PHYSFS_readSLE16(
        file: *mut PHYSFS_File,
        val: *mut PHYSFS_sint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_readULE16(
        file: *mut PHYSFS_File,
        val: *mut PHYSFS_uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_readSBE16(
        file: *mut PHYSFS_File,
        val: *mut PHYSFS_sint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_readUBE16(
        file: *mut PHYSFS_File,
        val: *mut PHYSFS_uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_readSLE32(
        file: *mut PHYSFS_File,
        val: *mut PHYSFS_sint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_readULE32(
        file: *mut PHYSFS_File,
        val: *mut PHYSFS_uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_readSBE32(
        file: *mut PHYSFS_File,
        val: *mut PHYSFS_sint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_readUBE32(
        file: *mut PHYSFS_File,
        val: *mut PHYSFS_uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_readSLE64(
        file: *mut PHYSFS_File,
        val: *mut PHYSFS_sint64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_readULE64(
        file: *mut PHYSFS_File,
        val: *mut PHYSFS_uint64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_readSBE64(
        file: *mut PHYSFS_File,
        val: *mut PHYSFS_sint64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_readUBE64(
        file: *mut PHYSFS_File,
        val: *mut PHYSFS_uint64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_writeSLE16(file: *mut PHYSFS_File, val: PHYSFS_sint16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_writeULE16(file: *mut PHYSFS_File, val: PHYSFS_uint16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_writeSBE16(file: *mut PHYSFS_File, val: PHYSFS_sint16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_writeUBE16(file: *mut PHYSFS_File, val: PHYSFS_uint16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_writeSLE32(file: *mut PHYSFS_File, val: PHYSFS_sint32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_writeULE32(file: *mut PHYSFS_File, val: PHYSFS_uint32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_writeSBE32(file: *mut PHYSFS_File, val: PHYSFS_sint32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_writeUBE32(file: *mut PHYSFS_File, val: PHYSFS_uint32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_writeSLE64(file: *mut PHYSFS_File, val: PHYSFS_sint64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_writeULE64(file: *mut PHYSFS_File, val: PHYSFS_uint64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_writeSBE64(file: *mut PHYSFS_File, val: PHYSFS_sint64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_writeUBE64(file: *mut PHYSFS_File, val: PHYSFS_uint64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_isInit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_symbolicLinksPermitted() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PHYSFS_Allocator {
    pub Init: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub Deinit: ::std::option::Option<unsafe extern "C" fn()>,
    pub Malloc: ::std::option::Option<
        unsafe extern "C" fn(arg1: PHYSFS_uint64) -> *mut ::std::os::raw::c_void,
    >,
    pub Realloc: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: PHYSFS_uint64,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub Free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_PHYSFS_Allocator() {
    assert_eq!(
        ::std::mem::size_of::<PHYSFS_Allocator>(),
        40usize,
        concat!("Size of: ", stringify!(PHYSFS_Allocator))
    );
    assert_eq!(
        ::std::mem::align_of::<PHYSFS_Allocator>(),
        8usize,
        concat!("Alignment of ", stringify!(PHYSFS_Allocator))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Allocator>())).Init as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Allocator),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Allocator>())).Deinit as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Allocator),
            "::",
            stringify!(Deinit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Allocator>())).Malloc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Allocator),
            "::",
            stringify!(Malloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Allocator>())).Realloc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Allocator),
            "::",
            stringify!(Realloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Allocator>())).Free as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Allocator),
            "::",
            stringify!(Free)
        )
    );
}
extern "C" {
    pub fn PHYSFS_setAllocator(allocator: *const PHYSFS_Allocator) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_mount(
        newDir: *const ::std::os::raw::c_char,
        mountPoint: *const ::std::os::raw::c_char,
        appendToPath: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_getMountPoint(
        dir: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
pub type PHYSFS_StringCallback = ::std::option::Option<
    unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, str_: *const ::std::os::raw::c_char),
>;
pub type PHYSFS_EnumFilesCallback = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        origdir: *const ::std::os::raw::c_char,
        fname: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn PHYSFS_getCdRomDirsCallback(c: PHYSFS_StringCallback, d: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn PHYSFS_getSearchPathCallback(c: PHYSFS_StringCallback, d: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn PHYSFS_enumerateFilesCallback(
        dir: *const ::std::os::raw::c_char,
        c: PHYSFS_EnumFilesCallback,
        d: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn PHYSFS_utf8FromUcs4(
        src: *const PHYSFS_uint32,
        dst: *mut ::std::os::raw::c_char,
        len: PHYSFS_uint64,
    );
}
extern "C" {
    pub fn PHYSFS_utf8ToUcs4(
        src: *const ::std::os::raw::c_char,
        dst: *mut PHYSFS_uint32,
        len: PHYSFS_uint64,
    );
}
extern "C" {
    pub fn PHYSFS_utf8FromUcs2(
        src: *const PHYSFS_uint16,
        dst: *mut ::std::os::raw::c_char,
        len: PHYSFS_uint64,
    );
}
extern "C" {
    pub fn PHYSFS_utf8ToUcs2(
        src: *const ::std::os::raw::c_char,
        dst: *mut PHYSFS_uint16,
        len: PHYSFS_uint64,
    );
}
extern "C" {
    pub fn PHYSFS_utf8FromLatin1(
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        len: PHYSFS_uint64,
    );
}
extern "C" {
    pub fn PHYSFS_caseFold(from: PHYSFS_uint32, to: *mut PHYSFS_uint32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_utf8stricmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_utf16stricmp(
        str1: *const PHYSFS_uint16,
        str2: *const PHYSFS_uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_ucs4stricmp(
        str1: *const PHYSFS_uint32,
        str2: *const PHYSFS_uint32,
    ) -> ::std::os::raw::c_int;
}
pub const PHYSFS_EnumerateCallbackResult_PHYSFS_ENUM_ERROR: PHYSFS_EnumerateCallbackResult = -1;
pub const PHYSFS_EnumerateCallbackResult_PHYSFS_ENUM_STOP: PHYSFS_EnumerateCallbackResult = 0;
pub const PHYSFS_EnumerateCallbackResult_PHYSFS_ENUM_OK: PHYSFS_EnumerateCallbackResult = 1;
pub type PHYSFS_EnumerateCallbackResult = ::std::os::raw::c_int;
pub type PHYSFS_EnumerateCallback = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        origdir: *const ::std::os::raw::c_char,
        fname: *const ::std::os::raw::c_char,
    ) -> PHYSFS_EnumerateCallbackResult,
>;
extern "C" {
    pub fn PHYSFS_enumerate(
        dir: *const ::std::os::raw::c_char,
        c: PHYSFS_EnumerateCallback,
        d: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_unmount(oldDir: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_getAllocator() -> *const PHYSFS_Allocator;
}
pub const PHYSFS_FileType_PHYSFS_FILETYPE_REGULAR: PHYSFS_FileType = 0;
pub const PHYSFS_FileType_PHYSFS_FILETYPE_DIRECTORY: PHYSFS_FileType = 1;
pub const PHYSFS_FileType_PHYSFS_FILETYPE_SYMLINK: PHYSFS_FileType = 2;
pub const PHYSFS_FileType_PHYSFS_FILETYPE_OTHER: PHYSFS_FileType = 3;
pub type PHYSFS_FileType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PHYSFS_Stat {
    pub filesize: PHYSFS_sint64,
    pub modtime: PHYSFS_sint64,
    pub createtime: PHYSFS_sint64,
    pub accesstime: PHYSFS_sint64,
    pub filetype: PHYSFS_FileType,
    pub readonly: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PHYSFS_Stat() {
    assert_eq!(
        ::std::mem::size_of::<PHYSFS_Stat>(),
        40usize,
        concat!("Size of: ", stringify!(PHYSFS_Stat))
    );
    assert_eq!(
        ::std::mem::align_of::<PHYSFS_Stat>(),
        8usize,
        concat!("Alignment of ", stringify!(PHYSFS_Stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Stat>())).filesize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Stat),
            "::",
            stringify!(filesize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Stat>())).modtime as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Stat),
            "::",
            stringify!(modtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Stat>())).createtime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Stat),
            "::",
            stringify!(createtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Stat>())).accesstime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Stat),
            "::",
            stringify!(accesstime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Stat>())).filetype as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Stat),
            "::",
            stringify!(filetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Stat>())).readonly as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Stat),
            "::",
            stringify!(readonly)
        )
    );
}
extern "C" {
    pub fn PHYSFS_stat(
        fname: *const ::std::os::raw::c_char,
        stat: *mut PHYSFS_Stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_utf8FromUtf16(
        src: *const PHYSFS_uint16,
        dst: *mut ::std::os::raw::c_char,
        len: PHYSFS_uint64,
    );
}
extern "C" {
    pub fn PHYSFS_utf8ToUtf16(
        src: *const ::std::os::raw::c_char,
        dst: *mut PHYSFS_uint16,
        len: PHYSFS_uint64,
    );
}
extern "C" {
    pub fn PHYSFS_readBytes(
        handle: *mut PHYSFS_File,
        buffer: *mut ::std::os::raw::c_void,
        len: PHYSFS_uint64,
    ) -> PHYSFS_sint64;
}
extern "C" {
    pub fn PHYSFS_writeBytes(
        handle: *mut PHYSFS_File,
        buffer: *const ::std::os::raw::c_void,
        len: PHYSFS_uint64,
    ) -> PHYSFS_sint64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PHYSFS_Io {
    pub version: PHYSFS_uint32,
    pub opaque: *mut ::std::os::raw::c_void,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut PHYSFS_Io,
            buf: *mut ::std::os::raw::c_void,
            len: PHYSFS_uint64,
        ) -> PHYSFS_sint64,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut PHYSFS_Io,
            buffer: *const ::std::os::raw::c_void,
            len: PHYSFS_uint64,
        ) -> PHYSFS_sint64,
    >,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(io: *mut PHYSFS_Io, offset: PHYSFS_uint64) -> ::std::os::raw::c_int,
    >,
    pub tell: ::std::option::Option<unsafe extern "C" fn(io: *mut PHYSFS_Io) -> PHYSFS_sint64>,
    pub length: ::std::option::Option<unsafe extern "C" fn(io: *mut PHYSFS_Io) -> PHYSFS_sint64>,
    pub duplicate:
        ::std::option::Option<unsafe extern "C" fn(io: *mut PHYSFS_Io) -> *mut PHYSFS_Io>,
    pub flush:
        ::std::option::Option<unsafe extern "C" fn(io: *mut PHYSFS_Io) -> ::std::os::raw::c_int>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(io: *mut PHYSFS_Io)>,
}
#[test]
fn bindgen_test_layout_PHYSFS_Io() {
    assert_eq!(
        ::std::mem::size_of::<PHYSFS_Io>(),
        80usize,
        concat!("Size of: ", stringify!(PHYSFS_Io))
    );
    assert_eq!(
        ::std::mem::align_of::<PHYSFS_Io>(),
        8usize,
        concat!("Alignment of ", stringify!(PHYSFS_Io))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Io>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Io),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Io>())).opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Io),
            "::",
            stringify!(opaque)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Io>())).read as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Io),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Io>())).write as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Io),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Io>())).seek as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Io),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Io>())).tell as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Io),
            "::",
            stringify!(tell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Io>())).length as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Io),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Io>())).duplicate as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Io),
            "::",
            stringify!(duplicate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Io>())).flush as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Io),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Io>())).destroy as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Io),
            "::",
            stringify!(destroy)
        )
    );
}
extern "C" {
    pub fn PHYSFS_mountIo(
        io: *mut PHYSFS_Io,
        newDir: *const ::std::os::raw::c_char,
        mountPoint: *const ::std::os::raw::c_char,
        appendToPath: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_mountMemory(
        buf: *const ::std::os::raw::c_void,
        len: PHYSFS_uint64,
        del: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        newDir: *const ::std::os::raw::c_char,
        mountPoint: *const ::std::os::raw::c_char,
        appendToPath: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_mountHandle(
        file: *mut PHYSFS_File,
        newDir: *const ::std::os::raw::c_char,
        mountPoint: *const ::std::os::raw::c_char,
        appendToPath: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const PHYSFS_ErrorCode_PHYSFS_ERR_OK: PHYSFS_ErrorCode = 0;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_OTHER_ERROR: PHYSFS_ErrorCode = 1;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_OUT_OF_MEMORY: PHYSFS_ErrorCode = 2;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_NOT_INITIALIZED: PHYSFS_ErrorCode = 3;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_IS_INITIALIZED: PHYSFS_ErrorCode = 4;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_ARGV0_IS_NULL: PHYSFS_ErrorCode = 5;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_UNSUPPORTED: PHYSFS_ErrorCode = 6;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_PAST_EOF: PHYSFS_ErrorCode = 7;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_FILES_STILL_OPEN: PHYSFS_ErrorCode = 8;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_INVALID_ARGUMENT: PHYSFS_ErrorCode = 9;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_NOT_MOUNTED: PHYSFS_ErrorCode = 10;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_NOT_FOUND: PHYSFS_ErrorCode = 11;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_SYMLINK_FORBIDDEN: PHYSFS_ErrorCode = 12;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_NO_WRITE_DIR: PHYSFS_ErrorCode = 13;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_OPEN_FOR_READING: PHYSFS_ErrorCode = 14;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_OPEN_FOR_WRITING: PHYSFS_ErrorCode = 15;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_NOT_A_FILE: PHYSFS_ErrorCode = 16;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_READ_ONLY: PHYSFS_ErrorCode = 17;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_CORRUPT: PHYSFS_ErrorCode = 18;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_SYMLINK_LOOP: PHYSFS_ErrorCode = 19;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_IO: PHYSFS_ErrorCode = 20;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_PERMISSION: PHYSFS_ErrorCode = 21;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_NO_SPACE: PHYSFS_ErrorCode = 22;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_BAD_FILENAME: PHYSFS_ErrorCode = 23;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_BUSY: PHYSFS_ErrorCode = 24;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_DIR_NOT_EMPTY: PHYSFS_ErrorCode = 25;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_OS_ERROR: PHYSFS_ErrorCode = 26;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_DUPLICATE: PHYSFS_ErrorCode = 27;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_BAD_PASSWORD: PHYSFS_ErrorCode = 28;
pub const PHYSFS_ErrorCode_PHYSFS_ERR_APP_CALLBACK: PHYSFS_ErrorCode = 29;
pub type PHYSFS_ErrorCode = ::std::os::raw::c_uint;
extern "C" {
    pub fn PHYSFS_getLastErrorCode() -> PHYSFS_ErrorCode;
}
extern "C" {
    pub fn PHYSFS_getErrorByCode(code: PHYSFS_ErrorCode) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn PHYSFS_setErrorCode(code: PHYSFS_ErrorCode);
}
extern "C" {
    pub fn PHYSFS_getPrefDir(
        org: *const ::std::os::raw::c_char,
        app: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PHYSFS_Archiver {
    pub version: PHYSFS_uint32,
    pub info: PHYSFS_ArchiveInfo,
    pub openArchive: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut PHYSFS_Io,
            name: *const ::std::os::raw::c_char,
            forWrite: ::std::os::raw::c_int,
            claimed: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub enumerate: ::std::option::Option<
        unsafe extern "C" fn(
            opaque: *mut ::std::os::raw::c_void,
            dirname: *const ::std::os::raw::c_char,
            cb: PHYSFS_EnumerateCallback,
            origdir: *const ::std::os::raw::c_char,
            callbackdata: *mut ::std::os::raw::c_void,
        ) -> PHYSFS_EnumerateCallbackResult,
    >,
    pub openRead: ::std::option::Option<
        unsafe extern "C" fn(
            opaque: *mut ::std::os::raw::c_void,
            fnm: *const ::std::os::raw::c_char,
        ) -> *mut PHYSFS_Io,
    >,
    pub openWrite: ::std::option::Option<
        unsafe extern "C" fn(
            opaque: *mut ::std::os::raw::c_void,
            filename: *const ::std::os::raw::c_char,
        ) -> *mut PHYSFS_Io,
    >,
    pub openAppend: ::std::option::Option<
        unsafe extern "C" fn(
            opaque: *mut ::std::os::raw::c_void,
            filename: *const ::std::os::raw::c_char,
        ) -> *mut PHYSFS_Io,
    >,
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(
            opaque: *mut ::std::os::raw::c_void,
            filename: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub mkdir: ::std::option::Option<
        unsafe extern "C" fn(
            opaque: *mut ::std::os::raw::c_void,
            filename: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub stat: ::std::option::Option<
        unsafe extern "C" fn(
            opaque: *mut ::std::os::raw::c_void,
            fn_: *const ::std::os::raw::c_char,
            stat: *mut PHYSFS_Stat,
        ) -> ::std::os::raw::c_int,
    >,
    pub closeArchive:
        ::std::option::Option<unsafe extern "C" fn(opaque: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_PHYSFS_Archiver() {
    assert_eq!(
        ::std::mem::size_of::<PHYSFS_Archiver>(),
        120usize,
        concat!("Size of: ", stringify!(PHYSFS_Archiver))
    );
    assert_eq!(
        ::std::mem::align_of::<PHYSFS_Archiver>(),
        8usize,
        concat!("Alignment of ", stringify!(PHYSFS_Archiver))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Archiver>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Archiver),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Archiver>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Archiver),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Archiver>())).openArchive as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Archiver),
            "::",
            stringify!(openArchive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Archiver>())).enumerate as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Archiver),
            "::",
            stringify!(enumerate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Archiver>())).openRead as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Archiver),
            "::",
            stringify!(openRead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Archiver>())).openWrite as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Archiver),
            "::",
            stringify!(openWrite)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Archiver>())).openAppend as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Archiver),
            "::",
            stringify!(openAppend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Archiver>())).remove as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Archiver),
            "::",
            stringify!(remove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Archiver>())).mkdir as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Archiver),
            "::",
            stringify!(mkdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Archiver>())).stat as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Archiver),
            "::",
            stringify!(stat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PHYSFS_Archiver>())).closeArchive as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(PHYSFS_Archiver),
            "::",
            stringify!(closeArchive)
        )
    );
}
extern "C" {
    pub fn PHYSFS_registerArchiver(archiver: *const PHYSFS_Archiver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PHYSFS_deregisterArchiver(ext: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
